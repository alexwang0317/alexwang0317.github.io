posts:
  - title: "Lazy Logging"
    date: 2025-01-05
    summary: >
      Optimize Python logging performance with lazy evaluation techniques
    link: "/python/engineering/python-lazy-logging"
  - title: "Interface Stubs"
    date: 2025-01-05
    summary: >
      Resolve circular imports using Abstract Base Classes for cleaner module dependencies
    link: "/python/engineering/python-circular-imports-abc"
  - title: "__slots__"
    date: 2025-12-19
    summary: >
      __slots__ for compact and faster object storage
    link: "/python/engineering/python-slots-dunder"
  - title: "TypedDict"
    date: 2025-09-06
    summary: >
      TypedDict for type-safe dictionaries with optional keys
    link: "/python/engineering/python-typeddict"
  - title: "__bool__"
    date: 2025-08-02
    summary: >
      __bool__ dunder method for truthiness evaluation
    link: "/python/engineering/python-bool-dunder"
  - title: "__all__"
    date: 2025-01-05
    summary: >
      Control module exports explicitly with Python's __all__
    link: "/python/engineering/python-all-dunder"
  - title: "Enum Magic"
    date: 2025-09-03
    summary: >
      Enum, StrEnum, IntEnum, and Flags for type-safe constants
    link: "/python/engineering/python-enum-magic"
  - title: "TypeGuard"
    date: 2025-08-27
    summary: >
      TypeGuard for type narrowing and better type safety
    link: "/python/engineering/python-typeguard"
  - title: "ABC (Abstract Base Classes)"
    date: 2025-01-03
    summary: >
      Enforce method implementation at instantiation time with Python's ABC
    link: "/python/engineering/python-abc"
  - title: "Self"
    date: 2025-08-15
    summary: >
      Self type hint for better type safety
    link: "/python/engineering/python-self-typing"
  - title: "functools.partial"
    date: 2025-07-20
    summary: >
      functools.partial for elegant function composition and cleaner code
    link: "/python/engineering/python-functools-partial"
  - title: "@override Decorator"
    date: 2025-07-08
    summary: >
      @override decorator prevents inheritance bugs and makes your code more
      maintainable
    link: "/python/engineering/python-override-decorator"
